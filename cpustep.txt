// LDA LDX LDY
case LDA_Imm_A9: cpu.loadReg(&cpu.A, cpu.immediate())
case LDX_Imm_A2: cpu.loadReg(&cpu.X, cpu.immediate())
case LDY_Imm_A0: cpu.loadReg(&cpu.Y, cpu.immediate())
case LDA_Zp_A5: cpu.loadReg(&cpu.A, cpu.zeroPage())
case LDX_Zp_A6: cpu.loadReg(&cpu.X, cpu.zeroPage())
case LDY_Zp_A4: cpu.loadReg(&cpu.Y, cpu.zeroPage())
case LDY_Zp_X_B4: cpu.loadReg(&cpu.Y, cpu.zeroPageIndexed(cpu.X))
case LDA_Zp_X_B5: cpu.loadReg(&cpu.A, cpu.zeroPageIndexed(cpu.X))
case LDX_Zp_Y_B6: cpu.loadReg(&cpu.X, cpu.zeroPageIndexed(cpu.Y))
case LDA_Abs_AD: cpu.loadReg(&cpu.A, cpu.absolute())
case LDX_Abs_AE: cpu.loadReg(&cpu.X, cpu.absolute())
case LDY_Abs_AC: cpu.loadReg(&cpu.Y, cpu.absolute())
case LDA_Abs_X_BD: cpu.loadReg(&cpu.A, cpu.absoluteIndexed(cpu.X))
case LDY_Abs_X_BC: cpu.loadReg(&cpu.Y, cpu.absoluteIndexed(cpu.X))
case LDA_Abs_Y_B9: cpu.loadReg(&cpu.A, cpu.absoluteIndexed(cpu.Y))
case LDX_Abs_Y_BE: cpu.loadReg(&cpu.X, cpu.absoluteIndexed(cpu.Y))
case LDA_IndexIndirX_A1: cpu.loadReg(&cpu.A, cpu.indexedIndirectX())
case LDA_IndirIndexY_B1: cpu.loadReg(&cpu.A, cpu.indirectIndexedY())
// STA STX STY
case STY_Zp_84: cpu.storeReg(cpu.Y, word(cpu.zeroPageAddress()))
case STA_Zp_85: cpu.storeReg(cpu.A, word(cpu.zeroPageAddress()))
case STX_Zp_86: cpu.storeReg(cpu.X, word(cpu.zeroPageAddress()))
case STY_Zp_X_94: cpu.storeReg(cpu.Y, cpu.zeroPageIndexed(cpu.X))
case STA_Zp_X_95: cpu.storeReg(cpu.A, cpu.zeroPageIndexed(cpu.X))
case STX_Zp_Y_96: cpu.storeReg(cpu.X, cpu.zeroPageIndexed(cpu.Y))
case STY_Abs_8C: cpu.storeReg(cpu.Y, cpu.absoluteAddress())
case STA_Abs_8D: cpu.storeReg(cpu.A, cpu.absoluteAddress())
case STX_Abs_8E: cpu.storeReg(cpu.X, cpu.absoluteAddress())
case STA_Abs_X_9D: cpu.storeReg(cpu.A, cpu.absoluteIndexedAddress(cpu.X))
case STA_Abs_Y_99: cpu.storeReg(cpu.A, cpu.absoluteIndexedAddress(cpu.Y))
case STA_IndexIndirX_81: cpu.storeReg(cpu.A, cpu.indexedIndirectXaddress())
case STA_IndirIndexY_91: cpu.storeReg(cpu.A, cpu.indirectIndexedYaddress())
// INX INY INC DEX DEY DEC
case INX_E8: DeInXY( cpu, &cpu->x, +1 );
case DEX_CA: DeInXY( cpu, &cpu->x, -1 );
case INY_C8: DeInXY( cpu, &cpu->y, +1 );
case DEY_88: DeInXY( cpu, &cpu->y, -1 );
case INC_Zp_E6: IncDec( cpu, operand, +1 );
case DEC_Zp_C6: IncDec( cpu, operand, -1 );
case INC_Zp_X_F6: IncDec( cpu, ZeroPageX_adr(), +1 );
case DEC_Zp_X_D6: IncDec( cpu, ZeroPageX_adr(), -1 );
case INC_Abs_EE: IncDec( cpu, Absolute_adr( cpu, operand ), +1 );
case DEC_Abs_CE: IncDec( cpu, Absolute_adr( cpu, operand ), -1 );
case INC_Abs_X_FE: IncDec( cpu, Absolute_Indexed_adr( cpu, operand, cpu->x ), +1 );
case DEC_Abs_X_DE: IncDec( cpu, Absolute_Indexed_adr( cpu, operand, cpu->x ), -1 );
// ADC SBC
case ADC_Imm_69: ADC(cpu, cpu.immediate())
case SBC_Imm_E9: SBC(cpu, cpu.immediate())
case ADC_Zp_65: ADC( cpu, cpu.zeroPage());
case SBC_Zp_E5: SBC( cpu, cpu.zeroPage());
case ADC_Zp_X_75: ADC( cpu, cpu.zeroPageIndexed(cpu.X) ); _ZeroPageX(); brea;
case SBC_Zp_X_F5: SBC( cpu, cpu.zeroPageIndexed(cpu.X) ); _ZeroPageX(); brea;
case ADC_Abs_6D: ADC( cpu, cpu.absolute());
case SBC_Abs_ED: SBC( cpu, cpu.absolute());
case ADC_Abs_X_7D: ADC( cpu, cpu.absoluteIndexed(cpu.X) );
case SBC_Abs_X_FD: SBC( cpu, cpu.absoluteIndexed(cpu.X) );
case ADC_Abs_Y_79: ADC( cpu, cpu.absoluteIndexed(cpu.Y) );
case SBC_Abs_Y_F9: SBC( cpu, cpu.absoluteIndexed(cpu.Y) );
case ADC_IndexIndirX_61: ADC( cpu, cpu.indexedIndirectX() );
case SBC_IndexIndirX_E1: SBC( cpu, cpu.indexedIndirectX() );
case ADC_IndirIndexY_71: ADC( cpu, cpu.indirectIndexedY() );
case SBC_IndirIndexY_F1: SBC( cpu, cpu.indirectIndexedY() );
// CMP CPX CPY
case CMP_Imm_C9: CPr( cpu, cpu->a, cpu.immediate())
case CPX_Imm_E0: CPr( cpu, cpu->x, cpu.immediate())
case CPY_Imm_C0: CPr( cpu, cpu->y, cpu.immediate())
case CMP_Zp_C5: CPr( cpu, cpu->a, cpu.zeroPage());
case CPX_Zp_E4: CPr( cpu, cpu->x, cpu.zeroPage());
case CPY_Zp_C4: CPr( cpu, cpu->y, cpu.zeroPage());
case CMP_Zp_X_D5: CPr( cpu, cpu->a, cpu.zeroPageIndexed(cpu.X) ); _ZeroPageX(); brea;
case CMP_Abs_CD: CPr( cpu, cpu->a, cpu.absolute());
case CPX_Abs_EC: CPr( cpu, cpu->x, cpu.absolute());
case CPY_Abs_CC: CPr( cpu, cpu->y, cpu.absolute());
case CMP_Abs_X_DD: CPr( cpu, cpu->a, cpu.absoluteIndexed(cpu.X) );
case CMP_Abs_Y_D9: CPr( cpu, cpu->a, cpu.absoluteIndexed(cpu.Y) );
case CMP_IndexIndirX_C1: CPr( cpu, cpu->a, cpu.indexedIndirectX() );
case CMP_IndirIndexY_D1: CPr( cpu, cpu->a, cpu.indirectIndexedY() );
// ASL LSR ROR ROL
case ASL_Acu_0A: ASLa( cpu );
case LSR_Acu_4A: LSRa( cpu );
case ROL_Acu_2A: ROLa( cpu );
case ROR_Acu_6A: RORa( cpu );
case ASL_Zp_06: ASL( cpu, operand );
case LSR_Zp_46: LSR( cpu, operand );
case ROL_Zp_26: ROL( cpu, operand );
case ROR_Zp_66: ROR( cpu, operand );
case ASL_Zp_X_16: ASL( cpu, ZeroPageX_adr() );
case LSR_Zp_X_56: LSR( cpu, ZeroPageX_adr() );
case ROL_Zp_X_36: ROL( cpu, ZeroPageX_adr() );
case ROR_Zp_X_76: ROR( cpu, ZeroPageX_adr() );
case ASL_Abs_0E: ASL( cpu, Absolute_adr( cpu, operand ) );
case LSR_Abs_4E: LSR( cpu, Absolute_adr( cpu, operand ) );
case ROL_Abs_2E: ROL( cpu, Absolute_adr( cpu, operand ) );
case ROR_Abs_6E: ROR( cpu, Absolute_adr( cpu, operand ) );
case ASL_Abs_X_1E: ASL( cpu, Absolute_Indexed_adr( cpu, operand, cpu->x ) );
case LSR_Abs_X_5E: LSR( cpu, Absolute_Indexed_adr( cpu, operand, cpu->x ) );
case ROL_Abs_X_3E: ROL( cpu, Absolute_Indexed_adr( cpu, operand, cpu->x ) );
case ROR_Abs_X_7E: ROR( cpu, Absolute_Indexed_adr( cpu, operand, cpu->x ) );
// TAX TAY TXA TYA TSX TXS
case TAX_AA: Trr( cpu, cpu->a, &cpu->x );
case TAY_A8: Trr( cpu, cpu->a, &cpu->y );
case TXA_8A: Trr( cpu, cpu->x, &cpu->a );
case TYA_98: Trr( cpu, cpu->y, &cpu->a );
case TSX_BA: Trr( cpu, cpu->sp, &cpu->x );
case TXS_9A: cpu->sp = cpu->x; // TXS doesn't affect any status flag
// AND EOR ORA BIT
case AND_Imm_29: AND( cpu, cpu.immediate())
case EOR_Imm_49: EOR( cpu, cpu.immediate())
case ORA_Imm_09: ORA( cpu, cpu.immediate())
case AND_Zp_25: AND( cpu, cpu.zeroPage());
case EOR_Zp_45: EOR( cpu, cpu.zeroPage());
case ORA_Zp_05: ORA( cpu, cpu.zeroPage());
case BIT_Zp_24: BIT( cpu, cpu.zeroPage());
case AND_Zp_X_35: AND( cpu, cpu.zeroPageIndexed(cpu.X) ); _ZeroPageX(); brea;
case EOR_Zp_X_55: EOR( cpu, cpu.zeroPageIndexed(cpu.X) ); _ZeroPageX(); brea;
case ORA_Zp_X_15: ORA( cpu, cpu.zeroPageIndexed(cpu.X) ); _ZeroPageX(); brea;
case AND_Abs_2D: AND( cpu, cpu.absolute());
case EOR_Abs_4D: EOR( cpu, cpu.absolute());
case ORA_Abs_0D: ORA( cpu, cpu.absolute());
case BIT_Abs_2C: BIT( cpu, cpu.absolute());
case AND_Abs_X_3D: AND( cpu, cpu.absoluteIndexed(cpu.X) );
case EOR_Abs_X_5D: EOR( cpu, cpu.absoluteIndexed(cpu.X) );
case ORA_Abs_X_1D: ORA( cpu, cpu.absoluteIndexed(cpu.X) );
case AND_Abs_Y_39: AND( cpu, cpu.absoluteIndexed(cpu.Y) );
case EOR_Abs_Y_59: EOR( cpu, cpu.absoluteIndexed(cpu.Y) );
case ORA_Abs_Y_19: ORA( cpu, cpu.absoluteIndexed(cpu.Y) );
case AND_IndexIndirX_21: AND( cpu, cpu.indexedIndirectX() );
case EOR_IndexIndirX_41: EOR( cpu, cpu.indexedIndirectX() );
case ORA_IndexIndirX_01: ORA( cpu, cpu.indexedIndirectX() );
case AND_IndirIndexY_31: AND( cpu, cpu.indirectIndexedY() );
case EOR_IndirIndexY_51: EOR( cpu, cpu.indirectIndexedY() );
case ORA_IndirIndexY_11: ORA( cpu, cpu.indirectIndexedY() );
// Branches
case BEQ_Relative_F0: Branch( cpu, cpu->status.zero, 1, operand );
case BNE_Relative_D0: Branch( cpu, cpu->status.zero, 0, operand );
case BMI_Relative_30: Branch( cpu, cpu->status.negative, 1, operand );
case BPL_Relative_10: Branch( cpu, cpu->status.negative, 0, operand );
case BCS_Relative_B0: Branch( cpu, cpu->status.carry, 1, operand );
case BCC_Relative_90: Branch( cpu, cpu->status.carry, 0, operand );
case BVS_Relative_70: Branch( cpu, cpu->status.overflow, 1, operand );
case BVC_Relative_50: Branch( cpu, cpu->status.overflow, 0, operand );
// Status flags
case SEC_38: cpu->status.carry = 1;
case CLC_18: cpu->status.carry = 0;
case CLD_D8: cpu->status.decimal_mode = 0;
case SED_F8: cpu->status.decimal_mode = 1;
case SEI_78: cpu->status.interrupt_disable = 1;
case CLI_58: cpu->status.interrupt_disable = 0;
case CLV_B8: cpu->status.overflow = 0;
// Stack
case PHP_08: PHP( cpu );
case PHA_48: push( cpu, cpu->a );
case PLP_28: PLP( cpu );
case PLA_68: PLA( cpu );
// Misc
case JMP_Abs_4C: JMPabs( cpu, operand );
case JMP_Indirect_6C: JMPind( cpu, operand );
case JSR_20: JSR( cpu, operand );
case RTS_60: RTS( cpu );
case RTI_40: RTI( cpu );
case NOP_EA:
case BRK_00: cpu->pc += 2; IRQ( cpu, 1 );
